---
name: Terraform
# https://github.com/hashicorp/setup-terraform#usage

on:
  workflow_call:
    inputs:
      AWS_DEFAULT_REGION:
        description: AWS Region
        type: string
        default: us-east-1
      version:
        description: Version of Terraform to use
        type: string
        default: 1.4.4
      working-directory:
        description: Directory in which to run Terraform commands and operations
        type: string
        default: ./
      state:
        description: 'Select a state storage option: local, cloud, s3'
        type: string
        default: local
      format:
        description: Trigger workflow to run 'terraform fmt -check' command
        type: boolean
        default: false
      validate:
        description: Trigger workflow to run 'terraform validate -no-color' command
        type: boolean
        default: true
      plan:
        description: Trigger workflow to run 'terraform plan -no-color -input=false' command
        type: boolean
        default: true
      apply:
        description: Trigger workflow to run 'terraform apply' command
        type: boolean
        default: false
    secrets:
      AWS_ACCOUNT_ID:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      GH_TOKEN:
        required: true
      NEW_RELIC_ACCOUNT_ID:
        required: false
      NEW_RELIC_API_KEY:
        required: false
      NEW_RELIC_REGION:
        required: false
      SSH_PRIVATE_KEY:
        required: true
      TF_API_TOKEN:
        required: false

permissions:
  contents: read
  pull-requests: write

env:
  AWS_DEFAULT_REGION: ${{ inputs.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  NEW_RELIC_ACCOUNT_ID: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
  NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
  NEW_RELIC_REGION: ${{ secrets.NEW_RELIC_REGION }}

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        if: inputs.state == 'local' || inputs.state == 's3'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.version }}

      - name: Setup Terraform Cloud
        if: inputs.state == 'cloud'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.version }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Start Terraform Job Summary
        run: echo "## Terraform ‚Äî \`${{ inputs.working-directory }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Terraform Format
        id: fmt
        if: inputs.format == true
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Format Output Summary
        run: echo "### ‚úèÔ∏è Terraform Format and Style ‚Äî \`${{ steps.fmt.outcome }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Terraform Format Failure Summary
        if: steps.fmt.outcome == 'failure'
        run: |
          echo "#### ‚ÄºÔ∏è Format Errors ‚ÄºÔ∏è" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.fmt.outputs.stderr }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        continue-on-error: true

      - name: Terraform Initialization Output Summary
        run: echo "### ‚öôÔ∏è Terraform Initialization  ‚Äî \`${{ steps.init.outcome }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Terraform Initialization Failure Summary
        if: steps.init.outcome == 'failure'
        run: |
          echo "#### ‚ÄºÔ∏è Initialization Errors ‚ÄºÔ∏è" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.init.outputs.stderr }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        if: inputs.validate == true
        run: terraform validate -no-color
        continue-on-error: true

      - name: Terraform Validation Output Summary
        if: inputs.validate == true
        run: |
          echo "### ü§ñ Terraform Validation ‚Äî \`${{ steps.validate.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Validation Output</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`\n" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.validate.outputs.stdout }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Terraform Validation Failure Summary
        if: steps.validate.outcome == 'failure'
        run: |
          echo "#### ‚ÄºÔ∏è Validation Errors ‚ÄºÔ∏è" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.validate.outputs.stderr }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        if: inputs.plan == true
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Plan Output Summary
        if: inputs.plan == true
        run: |
          echo "### üìñ Terraform Plan ‚Äî \`${{ steps.plan.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Show Plan</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`\n" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.plan.outputs.stdout }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Terraform Plan Failure Summary
        if: steps.plan.outcome == 'failure'
        run: |
          echo "#### ‚ÄºÔ∏è Plan Errors ‚ÄºÔ∏è" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.plan.outputs.stderr }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && inputs.plan == true
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style') && comment.body.includes('${{ inputs.working-directory }}')
            })

            let terraformFmtAlerts = ('${{ steps.fmt.outcome }}' == 'failure') ? `##### ‚ÄºÔ∏è ERRORS ‚ÄºÔ∏è

              \`\`\`\n
              ${{ steps.fmt.outputs.stderr }}
              \`\`\`
              ` : '';

            let terraformInitAlerts = ('${{ steps.init.outcome }}' == 'failure') ? `##### ‚ÄºÔ∏è ERRORS ‚ÄºÔ∏è

              \`\`\`\n
              ${{ steps.init.outputs.stderr }}
              \`\`\`
              ` : '';

            let terraformValidateAlerts = ('${{ steps.validate.outcome }}' == 'failure') ? `##### ‚ÄºÔ∏è ERRORS ‚ÄºÔ∏è

              \`\`\`\n
              ${{ steps.validate.outputs.stderr }}
              \`\`\`
              ` : '';

            let terraformPlanAlerts = ('${{ steps.plan.outcome }}' == 'failure') ? `##### ‚ÄºÔ∏è ERRORS ‚ÄºÔ∏è

              \`\`\`\n
              ${{ steps.plan.outputs.stderr }}
              \`\`\`
              ` : '';

            // 2. Prepare format of the comment
            const output = `### Terraform ‚Äî \`${{ inputs.working-directory }}\`
            #### ‚úèÔ∏è Terraform Format and Style: \`${{ steps.fmt.outcome }}\`
            ${terraformFmtAlerts}
            #### ‚öôÔ∏è Terraform Initialization: \`${{ steps.init.outcome }}\`
            ${terraformInitAlerts}
            #### ü§ñ Terraform Validation: \`${{ steps.validate.outcome }}\`
            ${terraformValidateAlerts}
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### üìñ Terraform Plan: \`${{ steps.plan.outcome }}\`
            ${terraformPlanAlerts}
            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            More info: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure' || steps.validate.outcome == 'failure' || steps.init.outcome == 'failure' || steps.fmt.outcome == 'failure'
        run: |
          echo "> ‚ö†Ô∏è Job failed. See errors for details." >> $GITHUB_STEP_SUMMARY
          exit 1

      - name: Terraform Apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        if: inputs.apply == true
        run: terraform apply -auto-approve -input=false
